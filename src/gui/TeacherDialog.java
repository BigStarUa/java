package gui;

import gui.res.StaticRes;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Window;
import java.awt.Dialog.ModalityType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;

import schedule.DbHelper;
import schedule.ResultListener;
import schedule.Room;
import schedule.RoomDAO;
import schedule.Teacher;
import schedule.TeacherDAO;

public class TeacherDialog extends JDialog implements ActionListener{

	private DbHelper db;
	private Teacher teacher;
	private final JPanel contentPanel = new JPanel();
	private JLabel lblName;
	private JLabel lblCapacity;
	private JLabel lblValue;
	private JTextField txtName;
	private JTextField txtCapacity;
	private JTextField txtValue;
	private JPanel panel;
	private JLabel lblClass;
	private ResultListener listener;

	public TeacherDialog() {
		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		initContent();
	}
	
	/**
	 * Create the dialog.
	 * @throws ClassNotFoundException 
	 */
	public TeacherDialog(Window owner, String title, ModalityType modalityType, Teacher teacher, ResultListener listener) throws ClassNotFoundException {
		super(owner, title, modalityType);
		db = new DbHelper();
		this.teacher = teacher;
		this.listener = listener;
		//populateForm();
		initContent();
		populateForm();
		//addContent();
	}
	
	private void populateForm()
	{
		if(teacher.getId() > 0)
		{
			txtName.setText(teacher.getName());
			txtValue.setText(String.valueOf(teacher.getValue()));		

		}
	}
	
	private void initContent()
	{
		setBounds(100, 100, 450, 300);
		getContentPane().setLayout(new BorderLayout());
		
		panel = new JPanel();
		FlowLayout flowLayout = (FlowLayout) panel.getLayout();
		flowLayout.setAlignment(FlowLayout.LEFT);
		panel.setBorder(UIManager.getBorder("MenuBar.border"));
		getContentPane().add(panel, BorderLayout.NORTH);
		
		lblClass = new JLabel("Teacher");
		lblClass.setFont(new Font("Tahoma", Font.PLAIN, 18));
		lblClass.setIcon(StaticRes.TEACHER48_ICON);
		panel.add(lblClass);
		
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		contentPanel.setLayout(null);
		
		lblName = new JLabel("Name:");
		lblName.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblName.setBounds(21, 22, 86, 20);
		contentPanel.add(lblName);
		
		lblValue = new JLabel("Value:");
		lblValue.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblValue.setBounds(21, 53, 86, 20);
		contentPanel.add(lblValue);
		
		txtName = new JTextField();
		txtName.setBounds(96, 24, 164, 20);
		contentPanel.add(txtName);
		txtName.setColumns(10);		
		
		txtValue = new JTextField();
		txtValue.setBounds(96, 53, 164, 20);
		contentPanel.add(txtValue);
		txtValue.setColumns(10);
		txtValue.addKeyListener(new KeyAdapter()
		{
		public void keyTyped(KeyEvent ke)
		{
			char c = ke.getKeyChar();
			if (!Character.isDigit(c))
			ke.consume(); // prevent event propagation
		}
		}); 
		
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("OK");
				okButton.setIcon(StaticRes.OK_ICON);
				okButton.setActionCommand("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						
						fillAndSaveTeacher();
												
					}
				});
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				JButton cancelButton = new JButton("Cancel");
				cancelButton.setActionCommand("Cancel");
				cancelButton.setIcon(StaticRes.CANCEL_ICON);
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						dispose();
					}
				});
				buttonPane.add(cancelButton);
			}
		}
	}
	
	private void fillAndSaveTeacher()
	{
		boolean check = true;
		String msg = "Error being generated by\n";
		if(txtName.getText().length() > 0)
		{
			teacher.setName(txtName.getText());
		}else{
			check = false;
			msg += " - incorrect name\n";
		}
		if(txtValue.getText().length() > 0 && Integer.valueOf(txtValue.getText()) >= 0)
		{
			teacher.setValue(Integer.valueOf(txtValue.getText()));
		}else{
			check = false;
			msg += " - incorrect value\n";
		}
		
		if(check){
			TeacherDAO teacherDAO = new TeacherDAO(db.connection);	
			int id = teacherDAO.updateTeacher(teacher);
			if(teacher.getId() == 0)
			{
				teacher.setId(id);
				teacher.setStatus(Room.STATUS_NEW);
			}
			dispose();
			listener.returnObject(teacher);
		}else{
			JOptionPane.showMessageDialog(TeacherDialog.this.getParent(), msg);
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
