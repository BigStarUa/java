package gui;

import gui.res.StaticRes;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import schedule.DbHelper;
import schedule.ResultListener;
import schedule.Room;
import schedule.RoomDAO;
import schedule.ScheduleDAO;

import javax.swing.JTextField;
import javax.swing.UIManager;

public class RoomDialog extends JDialog implements ActionListener{

	private DbHelper db;
	private Room room;
	private final JPanel contentPanel = new JPanel();
	private JLabel lblName;
	private JLabel lblCapacity;
	private JLabel lblValue;
	private JTextField txtName;
	private JTextField txtCapacity;
	private JTextField txtValue;
	private JPanel panel;
	private JLabel lblClass;
	private ResultListener listener;

	public RoomDialog() {
		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		initContent();
	}
	
	/**
	 * Create the dialog.
	 * @throws ClassNotFoundException 
	 */
	public RoomDialog(Window owner, String title, ModalityType modalityType, Room room, ResultListener listener) throws ClassNotFoundException {
		super(owner, title, modalityType);
		db = new DbHelper();
		this.room = room;
		this.listener = listener;
		//populateForm();
		initContent();
		populateForm();
		//addContent();
	}
	
	private void populateForm()
	{
		if(this.room.getId() > 0)
		{
			txtName.setText(this.room.getName());
			txtCapacity.setText(String.valueOf(this.room.getCapacity()));
			txtValue.setText(String.valueOf(this.room.getValue()));		

		}
	}
	
	private void initContent()
	{
		setBounds(100, 100, 450, 300);
		getContentPane().setLayout(new BorderLayout());
		
		panel = new JPanel();
		FlowLayout flowLayout = (FlowLayout) panel.getLayout();
		flowLayout.setAlignment(FlowLayout.LEFT);
		panel.setBorder(UIManager.getBorder("MenuBar.border"));
		getContentPane().add(panel, BorderLayout.NORTH);
		
		lblClass = new JLabel("Class");
		lblClass.setFont(new Font("Tahoma", Font.PLAIN, 18));
		lblClass.setIcon(StaticRes.CLASS48_ICON);
		panel.add(lblClass);
		
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		contentPanel.setLayout(null);
		
		lblName = new JLabel("Name:");
		lblName.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblName.setBounds(21, 22, 86, 20);
		contentPanel.add(lblName);
		
		lblCapacity = new JLabel("Capacity:");
		lblCapacity.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblCapacity.setBounds(21, 51, 86, 20);
		contentPanel.add(lblCapacity);
		
		lblValue = new JLabel("Value:");
		lblValue.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblValue.setBounds(21, 82, 86, 20);
		contentPanel.add(lblValue);
		
		txtName = new JTextField();
		txtName.setBounds(96, 24, 164, 20);
		contentPanel.add(txtName);
		txtName.setColumns(10);
		
		txtCapacity = new JTextField();
		txtCapacity.setBounds(96, 53, 164, 20);
		contentPanel.add(txtCapacity);
		txtCapacity.setColumns(10);
		txtCapacity.addKeyListener(new KeyAdapter()
		{
		public void keyTyped(KeyEvent ke)
		{
			char c = ke.getKeyChar();
			if (!Character.isDigit(c))
			ke.consume(); // prevent event propagation
		}
		}); 
		
		
		txtValue = new JTextField();
		txtValue.setBounds(96, 82, 164, 20);
		contentPanel.add(txtValue);
		txtValue.setColumns(10);
		txtValue.addKeyListener(new KeyAdapter()
		{
		public void keyTyped(KeyEvent ke)
		{
			char c = ke.getKeyChar();
			if (!Character.isDigit(c))
			ke.consume(); // prevent event propagation
		}
		}); 
		
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("OK");
				okButton.setIcon(StaticRes.OK_ICON);
				okButton.setActionCommand("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						
						fillAndSaveSchedule();
												
					}
				});
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				JButton cancelButton = new JButton("Cancel");
				cancelButton.setActionCommand("Cancel");
				cancelButton.setIcon(StaticRes.CANCEL_ICON);
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						System.out.println("Cancel Clicked!");
						dispose();
					}
				});
				buttonPane.add(cancelButton);
			}
		}
	}
	
	private void fillAndSaveSchedule()
	{
		boolean check = true;
		String msg = "Error being generated by\n";
		if(txtName.getText().length() > 0)
		{
			this.room.setName(txtName.getText());
		}else{
			check = false;
			msg += " - incorrect name\n";
		}
		if(txtCapacity.getText().length() > 0 && Integer.valueOf(txtCapacity.getText()) > 0)
		{
			this.room.setCapacity(Integer.valueOf(txtCapacity.getText()));
		}else{
			check = false;
			msg += " - incorrect capacity\n";
		}
		if(txtValue.getText().length() > 0 && Integer.valueOf(txtValue.getText()) >= 0)
		{
			this.room.setValue(Integer.valueOf(txtValue.getText()));
		}else{
			check = false;
			msg += " - incorrect value\n";
		}
		
		if(check){
			RoomDAO roomDAO = new RoomDAO(db.connection);	
			int id = roomDAO.updateRoom(room);
			if(room.getId() == 0)
			{
				room.setId(id);
				room.setStatus(Room.STATUS_NEW);
			}
			dispose();
			listener.returnObject(room);
		}else{
			JOptionPane.showMessageDialog(RoomDialog.this.getParent(), msg);
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
